{"ast":null,"code":"import _objectSpread from \"/home/sotatek/Music/nft-marketplace-reactjs-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/sotatek/Music/nft-marketplace-reactjs-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/sotatek/Music/nft-marketplace-reactjs-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sotatek/Music/nft-marketplace-reactjs-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useEffect } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport Web3 from \"web3\";\nimport { PAYMENT_TOKEN, NFT_MARKET_ADDR, NFT_ADDR } from \"./../config\";\nimport NFTabi from \"./../constants/abis/NFT.json\";\nimport paymentTokenAbi from \"./../constants/abis/Token.json\";\nimport { clearLocal } from \".\";\nimport marketplaceAbi from \"./../constants/abis/marketplace.json\";\nimport { MAX_NUM } from \"./../constants\";\nimport { toast } from \"react-toastify\";\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var web3, provider, netId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return detectEthereumProvider();\n\n          case 2:\n            provider = _context.sent;\n\n            if (!provider) {\n              _context.next = 13;\n              break;\n            }\n\n            web3 = new Web3(provider);\n            _context.next = 7;\n            return web3.eth.getChainId();\n\n          case 7:\n            netId = _context.sent;\n\n            if (!(netId !== 97)) {\n              _context.next = 11;\n              break;\n            }\n\n            toast.error(\"Your Wallet network is not supported yet, please select BSC Testnet\", {\n              delay: 1000\n            });\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            // no ethereum provider\n            console.log(\"no ethereum wallet detected\");\n            toast.error(\"Please install or enable MetaMask.\", {\n              delay: 1000\n            });\n            return _context.abrupt(\"return\", false);\n\n          case 16:\n            return _context.abrupt(\"return\", web3);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var web3, accounts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return loadWeb3();\n\n          case 2:\n            web3 = _context2.sent;\n\n            if (web3) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 5:\n            _context2.next = 7;\n            return web3.eth.getAccounts();\n\n          case 7:\n            accounts = _context2.sent;\n\n            if (!accounts.length) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", accounts[0]);\n\n          case 10:\n            return _context2.abrupt(\"return\");\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAccount() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTokenContract = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(abiOfToken, addressOfToken) {\n    var web3, tokenContract;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return loadWeb3();\n\n          case 2:\n            web3 = _context3.sent;\n\n            if (web3) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 5:\n            tokenContract = new web3.eth.Contract(abiOfToken, addressOfToken);\n            return _context3.abrupt(\"return\", tokenContract);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getTokenContract(_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getTokenInfo = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenContract) {\n    var _yield$Promise$all, _yield$Promise$all2, name, symbol;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(!tokenContract || !tokenContract.methods)) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 2:\n            _context4.next = 4;\n            return Promise.all([tokenContract.methods.name().call(), tokenContract.methods.symbol().call()]);\n\n          case 4:\n            _yield$Promise$all = _context4.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            name = _yield$Promise$all2[0];\n            symbol = _yield$Promise$all2[1];\n            return _context4.abrupt(\"return\", {\n              name: name,\n              symbol: symbol\n            });\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getTokenInfo(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var refreshBalanceService = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(publicAddress) {\n    var web3, coinbase, walletAddress, contract, tokenBalance, tokenInfo, balance;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return loadWeb3();\n\n          case 2:\n            web3 = _context5.sent;\n\n            if (web3) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", false);\n\n          case 5:\n            _context5.next = 7;\n            return web3.eth.getCoinbase();\n\n          case 7:\n            coinbase = _context5.sent;\n\n            if (coinbase) {\n              _context5.next = 11;\n              break;\n            }\n\n            toast(\"Please activate MetaMask.\", {\n              delay: 1000\n            });\n            return _context5.abrupt(\"return\", {});\n\n          case 11:\n            walletAddress = coinbase.toLowerCase();\n\n            if (!(walletAddress !== publicAddress)) {\n              _context5.next = 17;\n              break;\n            }\n\n            alert(\"The wallet is changed, please select correct wallet!\");\n            clearLocal(); // eslint-disable-next-line\n\n            window.location.href = window.location.href;\n            return _context5.abrupt(\"return\");\n\n          case 17:\n            _context5.next = 19;\n            return getTokenContract(paymentTokenAbi, PAYMENT_TOKEN);\n\n          case 19:\n            contract = _context5.sent;\n\n            if (!contract) {\n              _context5.next = 29;\n              break;\n            }\n\n            _context5.next = 23;\n            return contract.methods.balanceOf(publicAddress).call();\n\n          case 23:\n            tokenBalance = _context5.sent;\n            _context5.next = 26;\n            return getTokenInfo(contract);\n\n          case 26:\n            tokenInfo = _context5.sent;\n            balance = web3.utils.fromWei(tokenBalance, \"ether\");\n            return _context5.abrupt(\"return\", _objectSpread({\n              balance: balance,\n              publicAddress: publicAddress\n            }, tokenInfo));\n\n          case 29:\n            return _context5.abrupt(\"return\", false);\n\n          case 30:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function refreshBalanceService(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var useMarketPlaceContract = function useMarketPlaceContract() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      hash = _useState2[0],\n      setHash = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      receipt = _useState4[0],\n      setRecept = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      orderId = _useState8[0],\n      setOrderId = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      nftId = _useState10[0],\n      setNftId = _useState10[1];\n\n  var _useState11 = useState({\n    price: 0\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      addOrderState = _useState12[0],\n      setAddOrder = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      approveAllowance = _useState14[0],\n      setAllowance = _useState14[1];\n\n  var _useState15 = useState({\n    orderId: \"\",\n    price: \"0\"\n  }),\n      _useState16 = _slicedToArray(_useState15, 2),\n      buyNft = _useState16[0],\n      setBuyNft = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      handleState = _useState18[0],\n      setHandleState = _useState18[1];\n\n  var _useState19 = useState(\"0\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      balance = _useState20[0],\n      setTokenBalance = _useState20[1];\n\n  var approveNFT = function approveNFT(nftId) {\n    setNftId(nftId);\n    setHandleState(\"approve\");\n  };\n\n  var cancelOrder = function cancelOrder(orderId) {\n    setOrderId(orderId);\n    setHandleState(\"cancel\");\n  };\n\n  var addOrder = function addOrder(nftId, price) {\n    setNftId(nftId);\n    setAddOrder({\n      price: price\n    });\n    setHandleState(\"addOrder\");\n  };\n\n  var executeOrder = function executeOrder(orderId, price, payableToken) {\n    setBuyNft({\n      orderId: orderId,\n      price: price,\n      payableToken: payableToken\n    });\n    setHandleState(\"executeOrder\");\n  };\n\n  useEffect(function () {\n    setError(\"\");\n    setRecept(\"\");\n    setHash(\"\");\n  }, [handleState]); // approve NFT token and sell the NFT\n\n  useEffect(function () {\n    var handleApproveNFT = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var sellerAddress, NFTContract;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return getAccount();\n\n              case 2:\n                sellerAddress = _context6.sent;\n\n                if (!sellerAddress) {\n                  setError({\n                    message: \"Cannot connect wallet, please check again\"\n                  });\n                }\n\n                _context6.next = 6;\n                return getTokenContract(NFTabi, NFT_ADDR);\n\n              case 6:\n                NFTContract = _context6.sent;\n\n                try {\n                  NFTContract.methods.approve(NFT_MARKET_ADDR, nftId).send({\n                    from: sellerAddress\n                  }).once(\"transactionHash\", setHash).once(\"receipt\", setRecept).on(\"error\", setError);\n                } catch (e) {\n                  console.log(e);\n                  setError(\"Something error, please check again.\");\n                }\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function handleApproveNFT() {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    if (handleState === \"approve\") {\n      handleApproveNFT();\n    }\n  }, [handleState]); // Sell NFT\n\n  useEffect(function () {\n    var price = addOrderState.price;\n\n    var handleAddOrder = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var sellerAddress, marketPlaceContract;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return getAccount();\n\n              case 2:\n                sellerAddress = _context7.sent;\n\n                if (!sellerAddress) {\n                  setError({\n                    message: \"Cannot connect wallet, please check again\"\n                  });\n                }\n\n                _context7.next = 6;\n                return getTokenContract(marketplaceAbi, NFT_MARKET_ADDR);\n\n              case 6:\n                marketPlaceContract = _context7.sent;\n\n                try {\n                  marketPlaceContract.methods.addOrder(parseInt(nftId), PAYMENT_TOKEN, Web3.utils.toWei(price.toString(), \"ether\")).send({\n                    from: sellerAddress\n                  }).once(\"transactionHash\", setHash).once(\"receipt\", setRecept).on(\"error\", setError);\n                } catch (e) {\n                  console.log(e);\n                  setError(\"Something error, please check again.\");\n                }\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function handleAddOrder() {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    if (handleState === \"addOrder\") {\n      handleAddOrder();\n    }\n  }, [handleState]); // cancel order\n\n  useEffect(function () {\n    var handleCancelOrder = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var sellerAddress, marketPlaceContract;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return getAccount();\n\n              case 2:\n                sellerAddress = _context8.sent;\n\n                if (sellerAddress) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                setError({\n                  message: \"Cannot connect wallet, please check again\"\n                });\n                return _context8.abrupt(\"return\");\n\n              case 6:\n                _context8.next = 8;\n                return getTokenContract(marketplaceAbi, NFT_MARKET_ADDR);\n\n              case 8:\n                marketPlaceContract = _context8.sent;\n\n                try {\n                  marketPlaceContract.methods.cancelOrder(orderId).send({\n                    from: sellerAddress\n                  }).once(\"transactionHash\", setHash).once(\"receipt\", setRecept).on(\"error\", setError);\n                } catch (e) {\n                  console.log(e);\n                  setError(\"Something error, please check again.\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function handleCancelOrder() {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    if (handleState === \"cancel\") {\n      handleCancelOrder();\n    }\n  }, [handleState]); // buy ( approve token and execute order)\n\n  useEffect(function () {\n    var approveTokenContract = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var addressBuyer, contractToken;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return getAccount();\n\n              case 2:\n                addressBuyer = _context9.sent;\n\n                if (addressBuyer) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                setError({\n                  message: \"Cannot connect wallet, please check again\"\n                });\n                return _context9.abrupt(\"return\");\n\n              case 6:\n                _context9.prev = 6;\n                _context9.next = 9;\n                return getTokenContract(paymentTokenAbi, PAYMENT_TOKEN);\n\n              case 9:\n                contractToken = _context9.sent;\n                contractToken.methods.approve(NFT_MARKET_ADDR, MAX_NUM).send({\n                  from: addressBuyer\n                }).once(\"transactionHash\", setHash).once(\"receipt\", setRecept).on(\"error\", setError);\n                _context9.next = 17;\n                break;\n\n              case 13:\n                _context9.prev = 13;\n                _context9.t0 = _context9[\"catch\"](6);\n                console.log(_context9.t0);\n                setError(\"Something error, please check again.\");\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[6, 13]]);\n      }));\n\n      return function approveTokenContract() {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    var checkTokenApproved = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var addressBuyer, contractToken, _balance, allowance;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return getAccount();\n\n              case 2:\n                addressBuyer = _context10.sent;\n\n                if (addressBuyer) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                setError({\n                  message: \"Cannot connect wallet, please check again\"\n                });\n                return _context10.abrupt(\"return\");\n\n              case 6:\n                _context10.prev = 6;\n                _context10.next = 9;\n                return getTokenContract(paymentTokenAbi, PAYMENT_TOKEN);\n\n              case 9:\n                contractToken = _context10.sent;\n                _context10.next = 12;\n                return contractToken.methods.balanceOf(addressBuyer).call();\n\n              case 12:\n                _balance = _context10.sent;\n                setTokenBalance(_balance);\n                _context10.next = 16;\n                return contractToken.methods.allowance(addressBuyer, NFT_MARKET_ADDR).call();\n\n              case 16:\n                allowance = _context10.sent;\n                setAllowance(allowance);\n                _context10.next = 23;\n                break;\n\n              case 20:\n                _context10.prev = 20;\n                _context10.t0 = _context10[\"catch\"](6);\n                setError(_context10.t0.message);\n\n              case 23:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[6, 20]]);\n      }));\n\n      return function checkTokenApproved() {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    var executeOrderContract = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var addressBuyer, marketPlaceContract, _orderId, price;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return getAccount();\n\n              case 2:\n                addressBuyer = _context11.sent;\n                _context11.prev = 3;\n                _context11.next = 6;\n                return getTokenContract(marketplaceAbi, NFT_MARKET_ADDR);\n\n              case 6:\n                marketPlaceContract = _context11.sent;\n                _orderId = buyNft.orderId, price = buyNft.price;\n                marketPlaceContract.methods.executeOrder(_orderId, price).send({\n                  from: addressBuyer\n                }).once(\"transactionHash\", setHash).once(\"receipt\", setRecept).on(\"error\", setError);\n                _context11.next = 15;\n                break;\n\n              case 11:\n                _context11.prev = 11;\n                _context11.t0 = _context11[\"catch\"](3);\n                console.log(_context11.t0);\n                setError(\"Something error, please check again.\");\n\n              case 15:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[3, 11]]);\n      }));\n\n      return function executeOrderContract() {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n\n    if (handleState === \"executeOrder\") {\n      var price = buyNft.price;\n      checkTokenApproved();\n\n      if (!approveAllowance || !balance) {\n        return;\n      }\n\n      if (approveAllowance < MAX_NUM) {\n        setHandleState(\"approveToken\");\n        approveTokenContract();\n      } else {\n        if (balance && parseInt(balance) >= parseInt(price)) {\n          setHandleState(\"executeOrder\");\n          executeOrderContract();\n        } else {\n          setHandleState(\"\");\n          setError({\n            message: \"insufficient balance\"\n          });\n        }\n      }\n    }\n  }, [handleState, approveAllowance, balance]);\n  useEffect(function () {\n    if (error) {\n      setHandleState(\"\");\n    }\n  }, [error]);\n  return [{\n    handleState: handleState,\n    hash: hash,\n    receipt: receipt,\n    error: error\n  }, {\n    cancelOrder: cancelOrder,\n    approveNFT: approveNFT,\n    addOrder: addOrder,\n    executeOrder: executeOrder\n  }];\n};","map":{"version":3,"names":["useState","useEffect","detectEthereumProvider","Web3","PAYMENT_TOKEN","NFT_MARKET_ADDR","NFT_ADDR","NFTabi","paymentTokenAbi","clearLocal","marketplaceAbi","MAX_NUM","toast","loadWeb3","provider","web3","eth","getChainId","netId","error","delay","console","log","getAccount","getAccounts","accounts","length","getTokenContract","abiOfToken","addressOfToken","tokenContract","Contract","getTokenInfo","methods","Promise","all","name","call","symbol","refreshBalanceService","publicAddress","getCoinbase","coinbase","walletAddress","toLowerCase","alert","window","location","href","contract","balanceOf","tokenBalance","tokenInfo","balance","utils","fromWei","useMarketPlaceContract","hash","setHash","receipt","setRecept","setError","orderId","setOrderId","nftId","setNftId","price","addOrderState","setAddOrder","approveAllowance","setAllowance","buyNft","setBuyNft","handleState","setHandleState","setTokenBalance","approveNFT","cancelOrder","addOrder","executeOrder","payableToken","handleApproveNFT","sellerAddress","message","NFTContract","approve","send","from","once","on","e","handleAddOrder","marketPlaceContract","parseInt","toWei","toString","handleCancelOrder","approveTokenContract","addressBuyer","contractToken","checkTokenApproved","allowance","executeOrderContract"],"sources":["/home/sotatek/Music/nft-marketplace-reactjs-master/src/utils/smartcontract.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport Web3 from \"web3\";\nimport { PAYMENT_TOKEN, NFT_MARKET_ADDR, NFT_ADDR } from \"./../config\";\nimport NFTabi from \"./../constants/abis/NFT.json\";\nimport paymentTokenAbi from \"./../constants/abis/Token.json\";\nimport { clearLocal } from \".\";\nimport marketplaceAbi from \"./../constants/abis/marketplace.json\";\nimport { MAX_NUM } from \"./../constants\";\nimport { toast } from \"react-toastify\";\n\nexport const loadWeb3 = async () => {\n    let web3;\n    const provider = await detectEthereumProvider();\n    if (provider) {\n        web3 = new Web3(provider);\n        const netId = await web3.eth.getChainId();\n        if (netId !== 97) {\n            toast.error(\n                \"Your Wallet network is not supported yet, please select BSC Testnet\",\n                { delay: 1000 }\n            );\n            return false;\n        }\n    } else {\n        // no ethereum provider\n        console.log(\"no ethereum wallet detected\");\n        toast.error(\"Please install or enable MetaMask.\", { delay: 1000 });\n        return false;\n    }\n    return web3;\n};\n\nexport const getAccount = async () => {\n    const web3 = await loadWeb3();\n    if (!web3) {\n        return false;\n    }\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length) {\n        return accounts[0];\n    }\n    return;\n};\n\nexport const getTokenContract = async (abiOfToken, addressOfToken) => {\n    const web3 = await loadWeb3();\n    if (!web3) {\n        return false;\n    }\n    const tokenContract = new web3.eth.Contract(abiOfToken, addressOfToken);\n    return tokenContract;\n};\n\nexport const getTokenInfo = async (tokenContract) => {\n    if (!tokenContract || !tokenContract.methods) {\n        return;\n    }\n    const [name, symbol] = await Promise.all([\n        tokenContract.methods.name().call(),\n        tokenContract.methods.symbol().call(),\n    ]);\n    return { name, symbol };\n};\n\nexport const refreshBalanceService = async (publicAddress) => {\n    let web3 = await loadWeb3();\n\n    if (!web3) {\n        return false;\n    }\n    const coinbase = await web3.eth.getCoinbase();\n    if (!coinbase) {\n        toast(\"Please activate MetaMask.\", { delay: 1000 });\n        return {};\n    }\n    const walletAddress = coinbase.toLowerCase();\n    if (walletAddress !== publicAddress) {\n        alert(\"The wallet is changed, please select correct wallet!\");\n        clearLocal();\n        // eslint-disable-next-line\n        window.location.href = window.location.href;\n        return;\n    }\n    const contract = await getTokenContract(paymentTokenAbi, PAYMENT_TOKEN);\n    if (contract) {\n        const tokenBalance = await contract.methods.balanceOf(publicAddress).call();\n        const tokenInfo = await getTokenInfo(contract);\n        const balance = web3.utils.fromWei(tokenBalance, \"ether\");\n        return { balance, publicAddress, ...tokenInfo };\n    }\n    return false;\n};\n\nexport const useMarketPlaceContract = () => {\n    const [hash, setHash] = useState(\"\");\n    const [receipt, setRecept] = useState(null);\n    const [error, setError] = useState(null);\n    const [orderId, setOrderId] = useState();\n    const [nftId, setNftId] = useState();\n    const [addOrderState, setAddOrder] = useState({ price: 0 });\n    const [approveAllowance, setAllowance] = useState();\n    const [buyNft, setBuyNft] = useState({\n        orderId: \"\",\n        price: \"0\",\n    });\n    const [handleState, setHandleState] = useState(\"\");\n    const [balance, setTokenBalance] = useState(\"0\");\n\n    const approveNFT = (nftId) => {\n        setNftId(nftId);\n        setHandleState(\"approve\");\n    };\n\n    const cancelOrder = (orderId) => {\n        setOrderId(orderId);\n        setHandleState(\"cancel\");\n    };\n\n    const addOrder = (nftId, price) => {\n        setNftId(nftId);\n        setAddOrder({ price });\n        setHandleState(\"addOrder\");\n    };\n\n    const executeOrder = (orderId, price, payableToken) => {\n        setBuyNft({ orderId, price, payableToken });\n        setHandleState(\"executeOrder\");\n    };\n\n    useEffect(() => {\n        setError(\"\");\n        setRecept(\"\");\n        setHash(\"\");\n    }, [handleState]);\n\n    // approve NFT token and sell the NFT\n    useEffect(() => {\n        const handleApproveNFT = async () => {\n            const sellerAddress = await getAccount();\n            if (!sellerAddress) {\n                setError({ message: \"Cannot connect wallet, please check again\" });\n            }\n            const NFTContract = await getTokenContract(NFTabi, NFT_ADDR);\n            try {\n                NFTContract.methods\n                    .approve(NFT_MARKET_ADDR, nftId)\n                    .send({ from: sellerAddress })\n                    .once(\"transactionHash\", setHash)\n                    .once(\"receipt\", setRecept)\n                    .on(\"error\", setError);\n            } catch (e) {\n                console.log(e);\n                setError(\"Something error, please check again.\");\n            }\n        };\n        if (handleState === \"approve\") {\n            handleApproveNFT();\n        }\n    }, [handleState]);\n\n    // Sell NFT\n    useEffect(() => {\n        const { price } = addOrderState;\n        const handleAddOrder = async () => {\n            const sellerAddress = await getAccount();\n            if (!sellerAddress) {\n                setError({ message: \"Cannot connect wallet, please check again\" });\n            }\n            const marketPlaceContract = await getTokenContract(\n                marketplaceAbi,\n                NFT_MARKET_ADDR\n            );\n            try {\n                marketPlaceContract.methods\n                    .addOrder(\n                        parseInt(nftId),\n                        PAYMENT_TOKEN,\n                        Web3.utils.toWei(price.toString(), \"ether\")\n                    )\n                    .send({ from: sellerAddress })\n                    .once(\"transactionHash\", setHash)\n                    .once(\"receipt\", setRecept)\n                    .on(\"error\", setError);\n            } catch (e) {\n                console.log(e);\n                setError(\"Something error, please check again.\");\n            }\n        };\n        if (handleState === \"addOrder\") {\n            handleAddOrder();\n        }\n    }, [handleState]);\n\n    // cancel order\n    useEffect(() => {\n        const handleCancelOrder = async () => {\n            const sellerAddress = await getAccount();\n            if (!sellerAddress) {\n                setError({ message: \"Cannot connect wallet, please check again\" });\n                return;\n            }\n            const marketPlaceContract = await getTokenContract(\n                marketplaceAbi,\n                NFT_MARKET_ADDR\n            );\n            try {\n                marketPlaceContract.methods\n                    .cancelOrder(orderId)\n                    .send({ from: sellerAddress })\n                    .once(\"transactionHash\", setHash)\n                    .once(\"receipt\", setRecept)\n                    .on(\"error\", setError);\n            } catch (e) {\n                console.log(e);\n                setError(\"Something error, please check again.\");\n            }\n        };\n        if (handleState === \"cancel\") {\n            handleCancelOrder();\n        }\n    }, [handleState]);\n\n    // buy ( approve token and execute order)\n    useEffect(() => {\n        const approveTokenContract = async () => {\n            const addressBuyer = await getAccount();\n            if (!addressBuyer) {\n                setError({ message: \"Cannot connect wallet, please check again\" });\n                return;\n            }\n            try {\n                const contractToken = await getTokenContract(\n                    paymentTokenAbi,\n                    PAYMENT_TOKEN\n                );\n                contractToken.methods\n                    .approve(NFT_MARKET_ADDR, MAX_NUM)\n                    .send({ from: addressBuyer })\n                    .once(\"transactionHash\", setHash)\n                    .once(\"receipt\", setRecept)\n                    .on(\"error\", setError);\n            } catch (e) {\n                console.log(e);\n                setError(\"Something error, please check again.\");\n            }\n        };\n\n        const checkTokenApproved = async () => {\n            const addressBuyer = await getAccount();\n            if (!addressBuyer) {\n                setError({ message: \"Cannot connect wallet, please check again\" });\n                return;\n            }\n            try {\n                const contractToken = await getTokenContract(\n                    paymentTokenAbi,\n                    PAYMENT_TOKEN\n                );\n                const balance = await contractToken.methods\n                    .balanceOf(addressBuyer)\n                    .call();\n                setTokenBalance(balance);\n                const allowance = await contractToken.methods\n                    .allowance(addressBuyer, NFT_MARKET_ADDR)\n                    .call();\n                setAllowance(allowance);\n            } catch (e) {\n                setError(e.message);\n            }\n        };\n\n        const executeOrderContract = async () => {\n            const addressBuyer = await getAccount();\n            try {\n                const marketPlaceContract = await getTokenContract(\n                    marketplaceAbi,\n                    NFT_MARKET_ADDR\n                );\n                const { orderId, price } = buyNft;\n                marketPlaceContract.methods\n                    .executeOrder(orderId, price)\n                    .send({ from: addressBuyer })\n                    .once(\"transactionHash\", setHash)\n                    .once(\"receipt\", setRecept)\n                    .on(\"error\", setError);\n            } catch (e) {\n                console.log(e);\n                setError(\"Something error, please check again.\");\n            }\n        };\n\n        if (handleState === \"executeOrder\") {\n            const { price } = buyNft;\n            checkTokenApproved();\n            if (!approveAllowance || !balance) {\n                return;\n            }\n\n            if (approveAllowance < MAX_NUM) {\n                setHandleState(\"approveToken\");\n                approveTokenContract();\n            } else {\n                if (balance && parseInt(balance) >= parseInt(price)) {\n                    setHandleState(\"executeOrder\");\n                    executeOrderContract();\n                } else {\n                    setHandleState(\"\");\n                    setError({ message: \"insufficient balance\" });\n                }\n            }\n        }\n    }, [handleState, approveAllowance, balance]);\n\n    useEffect(() => {\n        if (error) {\n            setHandleState(\"\");\n        }\n    }, [error]);\n\n    return [\n        { handleState, hash, receipt, error },\n        { cancelOrder, approveNFT, addOrder, executeOrder },\n    ];\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}