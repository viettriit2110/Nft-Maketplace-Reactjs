{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar initials = require('initials');\n\nvar addPx = require('add-px');\n\nvar contrast = require('contrast'); // from https://flatuicolors.com/\n\n\nvar defaultColors = ['#2ecc71', // emerald\n'#3498db', // peter river\n'#8e44ad', // wisteria\n'#e67e22', // carrot\n'#e74c3c', // alizarin\n'#1abc9c', // turquoise\n'#2c3e50'];\n\nfunction sumChars(str) {\n  var sum = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum;\n}\n\nvar UserAvatar = function (_React$Component) {\n  _inherits(UserAvatar, _React$Component);\n\n  function UserAvatar() {\n    _classCallCheck(this, UserAvatar);\n\n    return _possibleConstructorReturn(this, (UserAvatar.__proto__ || Object.getPrototypeOf(UserAvatar)).apply(this, arguments));\n  }\n\n  _createClass(UserAvatar, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$borderRadius = _props.borderRadius,\n          borderRadius = _props$borderRadius === undefined ? '100%' : _props$borderRadius,\n          src = _props.src,\n          srcset = _props.srcset,\n          name = _props.name,\n          color = _props.color,\n          _props$colors = _props.colors,\n          colors = _props$colors === undefined ? defaultColors : _props$colors,\n          size = _props.size,\n          style = _props.style,\n          onClick = _props.onClick,\n          className = _props.className;\n      if (!name) throw new Error('UserAvatar requires a name');\n      var abbr = initials(name);\n      size = addPx(size);\n      var imageStyle = {\n        display: 'block',\n        borderRadius: borderRadius\n      };\n      var innerStyle = {\n        lineHeight: size,\n        textAlign: 'center',\n        borderRadius: borderRadius\n      };\n\n      if (size) {\n        imageStyle.width = innerStyle.width = innerStyle.maxWidth = size;\n        imageStyle.height = innerStyle.height = innerStyle.maxHeight = size;\n      }\n\n      var inner = void 0,\n          classes = [className, 'UserAvatar'];\n\n      if (src || srcset) {\n        inner = React.createElement('img', {\n          className: 'UserAvatar--img',\n          style: imageStyle,\n          src: src,\n          srcSet: srcset,\n          alt: name\n        });\n      } else {\n        var background = void 0;\n\n        if (color) {\n          background = color;\n        } else {\n          // pick a deterministic color from the list\n          var i = sumChars(name) % colors.length;\n          background = colors[i];\n        }\n\n        innerStyle.backgroundColor = background;\n        inner = abbr;\n      }\n\n      if (innerStyle.backgroundColor) {\n        classes.push('UserAvatar--' + contrast(innerStyle.backgroundColor));\n      }\n\n      return React.createElement('div', {\n        'aria-label': name,\n        className: classes.join(' '),\n        style: style\n      }, React.createElement('div', {\n        className: 'UserAvatar--inner',\n        style: innerStyle\n      }, inner));\n    }\n  }]);\n\n  return UserAvatar;\n}(React.Component);\n\nmodule.exports = UserAvatar;","map":null,"metadata":{},"sourceType":"script"}